<div class="row" id="index">
  <h1>{{title}}</h1>
  <p>Hello {{currentUser}}</p>
  <button id="logout">LOG OUT</button>
  <button id="my">My Tweets</button>
  <form>
    <input type="text" name="post-content" value="" id="post-content" placeholder="What are you up to?" autofocus>
    <input type="submit" name="button" value="POST!" id="post-button">
  </form>
  <!-- show all of the posts in this list -->
    <ul id="posts">
    </ul>
</div>


<script type="text/javascript">
var usernames = [];
var posts = [];

// Takes a raw "tweet" as a string and turns all @mentions into links to that user's profile page
// Will not turn invalid user names into links
function highlightMentionsInPost(post) {
  var regex = /\B@[\w\-]+/g;
  // The regex broken down:
  //    \B : matches at the start of any word (match `@user`, not `me@domain.com`)
  //    @ : Then look for the `@` symbol
  //    [\w\-]+ : Then look for 1 or more word characters (letters, digits or underscores) or hyphens
  //    /g : Search globally (don't stop at the first match)

  // helper function to pass to the `replace()` call below
  function replacer(match) {
    // check to see if the matched username is a valid username
    if (usernames.indexOf(match.slice(1)) >= 0) {
      // then wrap the valid username in a link to that user's profile page
      return "<a href='users/" + match.slice(1) + "'>" + match + "</a>";
    } else {
      // if it's not a valid username, don't do anything to the match
      return match;
    }
  }
  return post.replace(regex, replacer);
}

function displayPosts() {
  $.getJSON("/posts", function(data) {
    if (_.isEqual(data, posts)) {
      return;
    }
    posts = data;
    // create some DOM elements and append to the #posts ul
    $("#posts").empty();
    var $posts = $("#posts");
    data.forEach(function(e) {
      var $li = $("<li>").html("<a href='users/" + e.user + "'>" + "<span class='name'>" + e.user + "</span> </a> said: " + highlightMentionsInPost(e.post) + " at " + e._timestamp + " " + e._id).addClass(e.user);
      if (e.user == Cookies.get('username')) {
        $li.addClass('active');
      }
      $posts.append($li);
    });
  })
}
$("#logout").click(function(e) {
  Cookies.remove('username');
  window.location = "/login";
});
$("#post-button").click(function(e) {
  e.preventDefault();
  // send some post data to
  var newPost = {};
  var currentUser = Cookies.get('username');
  var postContent = $("#post-content").val();
  newPost.user = currentUser;
  newPost.post = postContent;
  $("#post-content").val("");
  $.post("/posts", newPost, function() {
    console.log("finished posting the new post from " + currentUser);
    displayPosts();
  })
});
$(function() {
  console.log("page is ready");
  // make AJAX GET call to /posts
  $.getJSON("/allusernames", function(data) {
    usernames = data;
    displayPosts();
    setInterval(displayPosts, 1000 * 5);
  })
});

var i = 0;
$('#my').click(function() {
  if (i % 2 == 0) {
    $('li').hide();
    $('.active').show(1750);
    $('#my').html('all tweets');
  }
  else {
    $('li').show(1750);
    $('#my').html('my tweets');
  }
  i += 1;
})
</script>
